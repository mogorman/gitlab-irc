#!/usr/bin/env ruby

require "date"
require "cinch"
require "sinatra"
require "yaml"
require "json"
require 'net/http'

config_file = ARGV.shift || "config.yml"
if not File.exists? config_file
  puts "Cant find config file #{config_file}"
  puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
  exit
end

$config = YAML.load_file config_file

$bot = Cinch::Bot.new do
  configure do |c|
    c.nick = $config["irc"]["nick"]
    c.user = "gitbot"
    c.realname = "GitBot"
    c.server = $config["irc"]["server"]
    c.port = $config["irc"]["port"]
    c.channels = $config["irc"]["channels"]
  end
end

Thread.new do
  $bot.start
end

def say(repo,msg)
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.Channel(chan).send msg
    end
  end
end

configure do
  set :bind, $config["http"]["host"]
  set :port, $config["http"]["port"]
  set :logging, false
  set :lock, true
end

get "/" do
  "GitBot lives here. Direct your hooks to /github."
end

post "/github" do
  p params[:payload]
  push = JSON.parse(params[:payload])

  repo = push["repository"]["name"]
  branch = push["ref"].gsub(/^refs\/heads\//,"")

  # sort commits by timestamp
  push["commits"].sort! do |a,b|
    ta = tb = nil
    begin
      ta = DateTime.parse(a["timestamp"])
    rescue ArgumentError
      ta = Time.at(a["timestamp"].to_i)
    end

    begin
      tb = DateTime.parse(b["timestamp"])
    rescue ArgumentError
      tb = Time.at(b["timestamp"].to_i)
    end
    
    ta <=> tb
  end

  # output first 3 commits
  push["commits"][0..2].each do |c|
    say repo, "\0030#{repo}:\0037 #{branch}\0033 #{c["author"]["name"]}\003 #{c["message"]}"
  end

  if push["commits"].length-2 > 0
    say repo, "\0030#{repo}:\0037 #{branch}\003 ... and #{push["commits"].length-2} more"
  end

  push.inspect
end


post "/commit" do
    json = JSON.parse(request.env["rack.input"].read)
    json["commits"][0..2].each do |commit|
        commit_message = commit["message"].gsub(/\n/," ")
	repo= json["repository"]["email"]
	rldn ="http://rldn.net/api/#{commit['url']}"
	result = Net::HTTP.get_response(URI.parse(rldn))
	my_url = result.body.split(' ')[1]
	commit_link= "View Commit: #{my_url}"
        say  repo, "[#{json["repository"]["name"].capitalize}] #{commit["author"]["name"]} | #{commit_message}"
        say repo, commit_link
    end
end

